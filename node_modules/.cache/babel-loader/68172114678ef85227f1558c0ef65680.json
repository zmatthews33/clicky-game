{"ast":null,"code":"var _jsxFileName = \"/Users/zmatt1/clicky-game/src/App.js\";\nimport React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Card from \"./components/Card/Card\";\nimport \"./App.css\";\nimport simpsonsList from \"./simpsons.json\";\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      simpsonsArr: simpsonsList,\n      previewsClick: \"\",\n      score: 0,\n      topScore: 0,\n      isPlaying: false,\n      wrongClick: false,\n      message: \"Click on a character to start!\"\n    };\n\n    this.shuffleArr = arr => {\n      let newPosition, temp;\n\n      for (let i = arr.length - 1; i > 0; i--) {\n        newPosition = Math.floor(Math.random() * (i + 1));\n        temp = arr[i];\n        arr[i] = arr[newPosition];\n        arr[newPosition] = temp;\n      }\n\n      return arr;\n    };\n\n    this.handleClick = event => {\n      event.preventDefault();\n      this.setState({\n        isPlaying: true,\n        message: \"Now Playing\"\n      });\n      const alt = event.target.alt;\n      const currentClick = alt;\n\n      if (currentClick !== this.state.previewsClick) {\n        const newSimpsonsArr = this.shuffleArr(this.state.simpsonsArr);\n        this.setState({\n          simpsonsArr: newSimpsonsArr,\n          previewsClick: currentClick,\n          score: this.state.score + 1,\n          wrongClick: false\n        });\n      } else {\n        // saving current score on a variable\n        const saveScore = this.state.score;\n        const newSimpsonsArr = this.shuffleArr(this.state.simpsonsArr);\n\n        if (saveScore > this.state.topScore) {\n          this.setState({\n            simpsonsArr: newSimpsonsArr,\n            previewsClick: currentClick,\n            score: 0,\n            topScore: saveScore,\n            wrongClick: true,\n            message: \"Doh!\"\n          });\n        }\n\n        this.setState({\n          simpsonsArr: newSimpsonsArr,\n          previewsClick: currentClick,\n          score: 0,\n          wrongClick: true,\n          message: \"Doh!\"\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const newSimpsonsArr = this.shuffleArr(this.state.simpsonsArr);\n    this.setState({\n      simpsonsArr: newSimpsonsArr\n    });\n  }\n\n  render() {\n    return [React.createElement(Header, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"main\", {\n      id: \"game-img\",\n      className: this.state.wrongClick ? \"container shake\" : \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.simpsonsArr.map((simpson, index) => React.createElement(Card, {\n      id: simpson.id,\n      key: index,\n      src: simpson.image,\n      name: simpson.name,\n      img: simpson.image,\n      handleClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    })))];\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/zmatt1/clicky-game/src/App.js"],"names":["React","Header","Card","simpsonsList","App","Component","state","simpsonsArr","previewsClick","score","topScore","isPlaying","wrongClick","message","shuffleArr","arr","newPosition","temp","i","length","Math","floor","random","handleClick","event","preventDefault","setState","alt","target","currentClick","newSimpsonsArr","saveScore","componentDidMount","render","map","simpson","index","id","image","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Card from \"./components/Card/Card\";\nimport \"./App.css\";\n\nimport simpsonsList from \"./simpsons.json\";\n\nclass App extends React.Component {\n  state = {\n    simpsonsArr: simpsonsList,\n    previewsClick: \"\",\n    score: 0,\n    topScore: 0,\n    isPlaying: false,\n    wrongClick: false,\n    message: \"Click on a character to start!\"\n  };\n  shuffleArr = arr => {\n    let newPosition, temp;\n    for (let i = arr.length - 1; i > 0; i--) {\n      newPosition = Math.floor(Math.random() * (i + 1));\n      temp = arr[i];\n      arr[i] = arr[newPosition];\n      arr[newPosition] = temp;\n    }\n    return arr;\n  };\n\n  componentDidMount() {\n    const newSimpsonsArr = this.shuffleArr(this.state.simpsonsArr);\n    this.setState({\n      simpsonsArr: newSimpsonsArr\n    });\n  }\n\n  handleClick = event => {\n    event.preventDefault();\n    this.setState({\n      isPlaying: true,\n      message: \"Now Playing\"\n    });\n\n    const { alt } = event.target;\n\n    const currentClick = alt;\n\n    if (currentClick !== this.state.previewsClick) {\n      const newSimpsonsArr = this.shuffleArr(this.state.simpsonsArr);\n      this.setState({\n        simpsonsArr: newSimpsonsArr,\n        previewsClick: currentClick,\n        score: this.state.score + 1,\n        wrongClick: false\n      });\n    } else {\n      // saving current score on a variable\n      const saveScore = this.state.score;\n      const newSimpsonsArr = this.shuffleArr(this.state.simpsonsArr);\n\n      if (saveScore > this.state.topScore) {\n        this.setState({\n          simpsonsArr: newSimpsonsArr,\n          previewsClick: currentClick,\n          score: 0,\n          topScore: saveScore,\n          wrongClick: true,\n          message: \"Doh!\"\n        });\n      }\n      this.setState({\n        simpsonsArr: newSimpsonsArr,\n        previewsClick: currentClick,\n        score: 0,\n        wrongClick: true,\n        message: \"Doh!\"\n      });\n    }\n  };\n\n  render() {\n    return [\n      <Header\n        score={this.state.score}\n        topScore={this.state.topScore}\n        message={this.state.message}\n      />,\n\n      <main\n        id=\"game-img\"\n        className={this.state.wrongClick ? \"container shake\" : \"container\"}\n      >\n        {this.state.simpsonsArr.map((simpson, index) => (\n          <Card\n            id={simpson.id}\n            key={index}\n            src={simpson.image}\n            name={simpson.name}\n            img={simpson.image}\n            handleClick={this.handleClick}\n          />\n        ))}\n      </main>\n    ];\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}